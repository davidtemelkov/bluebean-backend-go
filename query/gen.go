// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Asset         *asset
	City          *city
	Comment       *comment
	Facility      *facility
	FacilityAsset *facilityAsset
	FacilityUser  *facilityUser
	Punch         *punch
	Role          *role
	Space         *space
	Status        *status
	Sysdiagram    *sysdiagram
	User          *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Asset = &Q.Asset
	City = &Q.City
	Comment = &Q.Comment
	Facility = &Q.Facility
	FacilityAsset = &Q.FacilityAsset
	FacilityUser = &Q.FacilityUser
	Punch = &Q.Punch
	Role = &Q.Role
	Space = &Q.Space
	Status = &Q.Status
	Sysdiagram = &Q.Sysdiagram
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Asset:         newAsset(db, opts...),
		City:          newCity(db, opts...),
		Comment:       newComment(db, opts...),
		Facility:      newFacility(db, opts...),
		FacilityAsset: newFacilityAsset(db, opts...),
		FacilityUser:  newFacilityUser(db, opts...),
		Punch:         newPunch(db, opts...),
		Role:          newRole(db, opts...),
		Space:         newSpace(db, opts...),
		Status:        newStatus(db, opts...),
		Sysdiagram:    newSysdiagram(db, opts...),
		User:          newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Asset         asset
	City          city
	Comment       comment
	Facility      facility
	FacilityAsset facilityAsset
	FacilityUser  facilityUser
	Punch         punch
	Role          role
	Space         space
	Status        status
	Sysdiagram    sysdiagram
	User          user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Asset:         q.Asset.clone(db),
		City:          q.City.clone(db),
		Comment:       q.Comment.clone(db),
		Facility:      q.Facility.clone(db),
		FacilityAsset: q.FacilityAsset.clone(db),
		FacilityUser:  q.FacilityUser.clone(db),
		Punch:         q.Punch.clone(db),
		Role:          q.Role.clone(db),
		Space:         q.Space.clone(db),
		Status:        q.Status.clone(db),
		Sysdiagram:    q.Sysdiagram.clone(db),
		User:          q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Asset:         q.Asset.replaceDB(db),
		City:          q.City.replaceDB(db),
		Comment:       q.Comment.replaceDB(db),
		Facility:      q.Facility.replaceDB(db),
		FacilityAsset: q.FacilityAsset.replaceDB(db),
		FacilityUser:  q.FacilityUser.replaceDB(db),
		Punch:         q.Punch.replaceDB(db),
		Role:          q.Role.replaceDB(db),
		Space:         q.Space.replaceDB(db),
		Status:        q.Status.replaceDB(db),
		Sysdiagram:    q.Sysdiagram.replaceDB(db),
		User:          q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Asset         *assetDo
	City          *cityDo
	Comment       *commentDo
	Facility      *facilityDo
	FacilityAsset *facilityAssetDo
	FacilityUser  *facilityUserDo
	Punch         *punchDo
	Role          *roleDo
	Space         *spaceDo
	Status        *statusDo
	Sysdiagram    *sysdiagramDo
	User          *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Asset:         q.Asset.WithContext(ctx),
		City:          q.City.WithContext(ctx),
		Comment:       q.Comment.WithContext(ctx),
		Facility:      q.Facility.WithContext(ctx),
		FacilityAsset: q.FacilityAsset.WithContext(ctx),
		FacilityUser:  q.FacilityUser.WithContext(ctx),
		Punch:         q.Punch.WithContext(ctx),
		Role:          q.Role.WithContext(ctx),
		Space:         q.Space.WithContext(ctx),
		Status:        q.Status.WithContext(ctx),
		Sysdiagram:    q.Sysdiagram.WithContext(ctx),
		User:          q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
