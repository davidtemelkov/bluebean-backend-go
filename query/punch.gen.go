// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example/bluebean-go/model"
)

func newPunch(db *gorm.DB, opts ...gen.DOOption) punch {
	_punch := punch{}

	_punch.punchDo.UseDB(db, opts...)
	_punch.punchDo.UseModel(&model.Punch{})

	tableName := _punch.punchDo.TableName()
	_punch.ALL = field.NewAsterisk(tableName)
	_punch.ID = field.NewInt64(tableName, "Id")
	_punch.Title = field.NewString(tableName, "Title")
	_punch.Description = field.NewString(tableName, "Description")
	_punch.StartDate = field.NewTime(tableName, "StartDate")
	_punch.ExpirationDate = field.NewTime(tableName, "ExpirationDate")
	_punch.CoordX = field.NewField(tableName, "CoordX")
	_punch.CoordY = field.NewField(tableName, "CoordY")
	_punch.StatusID = field.NewInt64(tableName, "StatusId")
	_punch.AssigneeID = field.NewInt64(tableName, "AssigneeId")
	_punch.CreatorID = field.NewInt64(tableName, "CreatorId")
	_punch.SpaceID = field.NewInt64(tableName, "SpaceId")
	_punch.AssetID = field.NewInt64(tableName, "AssetId")

	_punch.fillFieldMap()

	return _punch
}

type punch struct {
	punchDo punchDo

	ALL            field.Asterisk
	ID             field.Int64
	Title          field.String
	Description    field.String
	StartDate      field.Time
	ExpirationDate field.Time
	CoordX         field.Field
	CoordY         field.Field
	StatusID       field.Int64
	AssigneeID     field.Int64
	CreatorID      field.Int64
	SpaceID        field.Int64
	AssetID        field.Int64

	fieldMap map[string]field.Expr
}

func (p punch) Table(newTableName string) *punch {
	p.punchDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p punch) As(alias string) *punch {
	p.punchDo.DO = *(p.punchDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *punch) updateTableName(table string) *punch {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "Id")
	p.Title = field.NewString(table, "Title")
	p.Description = field.NewString(table, "Description")
	p.StartDate = field.NewTime(table, "StartDate")
	p.ExpirationDate = field.NewTime(table, "ExpirationDate")
	p.CoordX = field.NewField(table, "CoordX")
	p.CoordY = field.NewField(table, "CoordY")
	p.StatusID = field.NewInt64(table, "StatusId")
	p.AssigneeID = field.NewInt64(table, "AssigneeId")
	p.CreatorID = field.NewInt64(table, "CreatorId")
	p.SpaceID = field.NewInt64(table, "SpaceId")
	p.AssetID = field.NewInt64(table, "AssetId")

	p.fillFieldMap()

	return p
}

func (p *punch) WithContext(ctx context.Context) *punchDo { return p.punchDo.WithContext(ctx) }

func (p punch) TableName() string { return p.punchDo.TableName() }

func (p punch) Alias() string { return p.punchDo.Alias() }

func (p *punch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *punch) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["Id"] = p.ID
	p.fieldMap["Title"] = p.Title
	p.fieldMap["Description"] = p.Description
	p.fieldMap["StartDate"] = p.StartDate
	p.fieldMap["ExpirationDate"] = p.ExpirationDate
	p.fieldMap["CoordX"] = p.CoordX
	p.fieldMap["CoordY"] = p.CoordY
	p.fieldMap["StatusId"] = p.StatusID
	p.fieldMap["AssigneeId"] = p.AssigneeID
	p.fieldMap["CreatorId"] = p.CreatorID
	p.fieldMap["SpaceId"] = p.SpaceID
	p.fieldMap["AssetId"] = p.AssetID
}

func (p punch) clone(db *gorm.DB) punch {
	p.punchDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p punch) replaceDB(db *gorm.DB) punch {
	p.punchDo.ReplaceDB(db)
	return p
}

type punchDo struct{ gen.DO }

func (p punchDo) Debug() *punchDo {
	return p.withDO(p.DO.Debug())
}

func (p punchDo) WithContext(ctx context.Context) *punchDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p punchDo) ReadDB() *punchDo {
	return p.Clauses(dbresolver.Read)
}

func (p punchDo) WriteDB() *punchDo {
	return p.Clauses(dbresolver.Write)
}

func (p punchDo) Session(config *gorm.Session) *punchDo {
	return p.withDO(p.DO.Session(config))
}

func (p punchDo) Clauses(conds ...clause.Expression) *punchDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p punchDo) Returning(value interface{}, columns ...string) *punchDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p punchDo) Not(conds ...gen.Condition) *punchDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p punchDo) Or(conds ...gen.Condition) *punchDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p punchDo) Select(conds ...field.Expr) *punchDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p punchDo) Where(conds ...gen.Condition) *punchDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p punchDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *punchDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p punchDo) Order(conds ...field.Expr) *punchDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p punchDo) Distinct(cols ...field.Expr) *punchDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p punchDo) Omit(cols ...field.Expr) *punchDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p punchDo) Join(table schema.Tabler, on ...field.Expr) *punchDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p punchDo) LeftJoin(table schema.Tabler, on ...field.Expr) *punchDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p punchDo) RightJoin(table schema.Tabler, on ...field.Expr) *punchDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p punchDo) Group(cols ...field.Expr) *punchDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p punchDo) Having(conds ...gen.Condition) *punchDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p punchDo) Limit(limit int) *punchDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p punchDo) Offset(offset int) *punchDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p punchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *punchDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p punchDo) Unscoped() *punchDo {
	return p.withDO(p.DO.Unscoped())
}

func (p punchDo) Create(values ...*model.Punch) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p punchDo) CreateInBatches(values []*model.Punch, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p punchDo) Save(values ...*model.Punch) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p punchDo) First() (*model.Punch, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Punch), nil
	}
}

func (p punchDo) Take() (*model.Punch, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Punch), nil
	}
}

func (p punchDo) Last() (*model.Punch, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Punch), nil
	}
}

func (p punchDo) Find() ([]*model.Punch, error) {
	result, err := p.DO.Find()
	return result.([]*model.Punch), err
}

func (p punchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Punch, err error) {
	buf := make([]*model.Punch, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p punchDo) FindInBatches(result *[]*model.Punch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p punchDo) Attrs(attrs ...field.AssignExpr) *punchDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p punchDo) Assign(attrs ...field.AssignExpr) *punchDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p punchDo) Joins(fields ...field.RelationField) *punchDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p punchDo) Preload(fields ...field.RelationField) *punchDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p punchDo) FirstOrInit() (*model.Punch, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Punch), nil
	}
}

func (p punchDo) FirstOrCreate() (*model.Punch, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Punch), nil
	}
}

func (p punchDo) FindByPage(offset int, limit int) (result []*model.Punch, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p punchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p punchDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p punchDo) Delete(models ...*model.Punch) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *punchDo) withDO(do gen.Dao) *punchDo {
	p.DO = *do.(*gen.DO)
	return p
}
